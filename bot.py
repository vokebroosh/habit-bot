# bot.py ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è aiogram 3.22 + APScheduler
import logging
import sqlite3
import re
from datetime import datetime
import pytz
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤—Å—Ç–∞–≤–ª–µ–Ω —Ç–≤–æ–π –∫–ª—é—á –ø–æ –∑–∞–ø—Ä–æ—Å—É)
# -----------------------------
API_TOKEN = "8288617895:AAH6uoqtii48Y8BPd9_Y0yVIb1ktg105E0U"
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ë–∏—à–∫–µ–∫ (GMT+6)
timezone = pytz.timezone('Asia/Bishkek')

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler()

# -----------------------------
# –ë–î (SQLite)
# -----------------------------
conn = sqlite3.connect("habits.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS habits (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    name TEXT,
    time TEXT,
    timezone TEXT,
    created_at TEXT,
    completed_count INTEGER DEFAULT 0
)
""")
conn.commit()

# -----------------------------
# –†–µ–≥—É–ª—è—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
# -----------------------------
TIME_RE = re.compile(r'^\d{1,2}:[0-5]\d$')

# -----------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# -----------------------------
def format_age(created_iso: str) -> str:
    """–í–µ—Ä–Ω—É—Ç—å 'X –¥–Ω–µ–π Y —á–∞—Å–æ–≤' –æ—Ç created_iso –¥–æ now –≤ timezone."""
    try:
        created = datetime.fromisoformat(created_iso)
    except Exception:
        # fallback: –±–µ–∑ —Ç–∞–π–º–∑–æ–Ω—ã
        created = datetime.fromisoformat(created_iso)
    now = datetime.now(timezone)
    # –µ—Å–ª–∏ created ‚Äî naive, –¥–µ–ª–∞–µ–º aware (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º timezone)
    if created.tzinfo is None:
        created = timezone.localize(created)
    delta = now - created.astimezone(timezone)
    days = delta.days
    hours = delta.seconds // 3600
    return f"{days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤"

def build_reply_keyboard() -> ReplyKeyboardMarkup:
    # –§–æ—Ä–º–∏—Ä—É–µ–º ReplyKeyboardMarkup —á–µ—Ä–µ–∑ keyword-–∞—Ä–≥—É–º–µ–Ω—Ç (—Ç—Ä–µ–±—É–µ—Ç pydantic)
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/add_habit")],
            [KeyboardButton(text="/list_habits")]
        ],
        resize_keyboard=True
    )

def build_inline_for_habit(habit_id: int) -> InlineKeyboardMarkup:
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞—ë–º InlineKeyboardMarkup —á–µ—Ä–µ–∑ inline_keyboard kwarg
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{habit_id}"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{habit_id}"),
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{habit_id}")
            ]
        ]
    )

# -----------------------------
# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
# -----------------------------
def schedule_reminder(habit_id: int):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å (–∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å) –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è habit_id."""
    cursor.execute("SELECT user_id, time FROM habits WHERE id=?", (habit_id,))
    row = cursor.fetchone()
    if not row:
        return
    user_id, time_str = row
    # –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç
    if not TIME_RE.match(time_str):
        log.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –ë–î –¥–ª—è habit %s: %s", habit_id, time_str)
        return
    hour, minute = map(int, time_str.split(":"))
    job_id = f"reminder_{habit_id}"
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –±—ã–ª–∞
    try:
        scheduler.remove_job(job_id)
    except Exception:
        pass

    async def send_reminder():
        try:
            cursor.execute("SELECT user_id, name FROM habits WHERE id=?", (habit_id,))
            rr = cursor.fetchone()
            if not rr:
                try:
                    scheduler.remove_job(job_id)
                except Exception:
                    pass
                return
            u_id, name = rr
            await bot.send_message(u_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {name}", reply_markup=build_inline_for_habit(habit_id))
        except Exception as e:
            log.exception("–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è %s: %s", habit_id, e)

    # CronTrigger ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–≤ timezone)
    scheduler.add_job(send_reminder, trigger=CronTrigger(hour=hour, minute=minute, timezone=timezone), id=job_id)
    log.info("Scheduled reminder %s at %02d:%02d %s", job_id, hour, minute, timezone)

def reschedule_all_from_db():
    """–ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã."""
    cursor.execute("SELECT id FROM habits")
    for (hid,) in cursor.fetchall():
        try:
            schedule_reminder(hid)
        except Exception:
            log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è habit %s", hid)

# -----------------------------
# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–±–∑–æ—Ä
# -----------------------------
async def send_daily_overview():
    now = datetime.now(timezone)
    cursor.execute("SELECT DISTINCT user_id FROM habits")
    users = cursor.fetchall()
    for (user_id,) in users:
        cursor.execute("SELECT id, name, created_at, completed_count, time FROM habits WHERE user_id=?", (user_id,))
        habits = cursor.fetchall()
        if not habits:
            continue
        for habit_id, name, created_at_str, completed_count, time_str in habits:
            age = format_age(created_at_str)
            try:
                await bot.send_message(
                    user_id,
                    f"{name}\n"
                    f"–í—Ä–µ–º—è —Å —Å–æ–∑–¥–∞–Ω–∏—è: {age}\n"
                    f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count} —Ä–∞–∑\n"
                    f"–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str}",
                    reply_markup=build_inline_for_habit(habit_id)
                )
            except Exception:
                log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å daily overview –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", user_id)

# –¥–æ–±–∞–≤–ª—è–µ–º job (–±—É–¥–µ—Ç –≤ jobstore –¥–æ —Å—Ç–∞—Ä—Ç–∞ scheduler)
scheduler.add_job(send_daily_overview, trigger=CronTrigger(hour=8, minute=0, timezone=timezone), id="daily_overview")

# -----------------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã (–≤ –ø–æ—Ä—è–¥–∫–µ: —Å–ø–µ—Ü. –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –î–û –æ–±—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞)
# -----------------------------

# —Å–ª–æ–≤–∞—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> habit_id)
EDIT_NAME_USERS: dict[int, int] = {}
EDIT_TIME_USERS: dict[int, int] = {}

@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    markup = build_reply_keyboard()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏. –î–æ–±–∞–≤—å –ø—Ä–∏–≤—ã—á–∫—É: /add_habit", reply_markup=markup)

@dp.message(Command(commands=["add_habit"]))
async def cmd_add_habit(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤—ã—á–∫—É –∏ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø—Ä–∏–º–µ—Ä: –ß—Ç–µ–Ω–∏–µ, 21:30).")

@dp.message(lambda m: m.from_user.id in EDIT_NAME_USERS)
async def process_new_name(message: types.Message):
    user_id = message.from_user.id
    habit_id = EDIT_NAME_USERS.pop(user_id, None)
    if habit_id is None:
        return
    new_name = message.text.strip()
    cursor.execute("UPDATE habits SET name=? WHERE id=?", (new_name, habit_id))
    conn.commit()
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏/—Ç–µ–∫—Å—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã)
    schedule_reminder(habit_id)
    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_name}")

@dp.message(lambda m: m.from_user.id in EDIT_TIME_USERS)
async def process_new_time(message: types.Message):
    user_id = message.from_user.id
    habit_id = EDIT_TIME_USERS.pop(user_id, None)
    if habit_id is None:
        return
    new_time = message.text.strip()
    if not TIME_RE.match(new_time):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 21:30).")
        return
    cursor.execute("UPDATE habits SET time=? WHERE id=?", (new_time, habit_id))
    conn.commit()
    schedule_reminder(habit_id)
    await message.answer(f"–í—Ä–µ–º—è –ø—Ä–∏–≤—ã—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_time}")

# –û–ë–†–ê–ë–û–¢–ß–ò–ö: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å –∑–∞–ø—è—Ç–æ–π –∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
@dp.message(lambda m: ("," in m.text) and (m.from_user.id not in EDIT_NAME_USERS) and (m.from_user.id not in EDIT_TIME_USERS))
async def save_habit(message: types.Message):
    try:
        name, time_str = [x.strip() for x in message.text.split(",", 1)]
        if not TIME_RE.match(time_str):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 21:30).")
            return
        created_at = datetime.now(timezone).isoformat()
        cursor.execute(
            "INSERT INTO habits (user_id, name, time, timezone, created_at) VALUES (?, ?, ?, ?, ?)",
            (message.from_user.id, name, time_str, "Asia/Bishkek", created_at)
        )
        conn.commit()
        habit_id = cursor.lastrowid
        schedule_reminder(habit_id)
        await message.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str}.")
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: %s", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏.")

@dp.message(Command(commands=["list_habits"]))
async def cmd_list_habits(message: types.Message):
    cursor.execute("SELECT id, name, created_at, completed_count, time FROM habits WHERE user_id=?", (message.from_user.id,))
    habits = cursor.fetchall()
    if not habits:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.")
        return
    for habit_id, name, created_at_str, completed_count, time_str in habits:
        age = format_age(created_at_str)
        await message.answer(
            f"{name}\n"
            f"–í—Ä–µ–º—è —Å —Å–æ–∑–¥–∞–Ω–∏—è: {age}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count} —Ä–∞–∑\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str}",
            reply_markup=build_inline_for_habit(habit_id)
        )

# -----------------------------
# Callback handlers (inline buttons)
# -----------------------------
@dp.callback_query(lambda c: c.data and c.data.startswith("done_"))
async def callback_done(cb: types.CallbackQuery):
    try:
        habit_id = int(cb.data.split("_", 1)[1])
        cursor.execute("SELECT completed_count, name, time, user_id, created_at FROM habits WHERE id=?", (habit_id,))
        row = cursor.fetchone()
        if not row:
            await cb.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        completed_count, name, time_str, user_id, created_at_str = row
        completed_count += 1
        cursor.execute("UPDATE habits SET completed_count=? WHERE id=?", (completed_count, habit_id))
        conn.commit()
        age = format_age(created_at_str)
        await cb.message.edit_text(
            f"{name}\n"
            f"–í—Ä–µ–º—è —Å —Å–æ–∑–¥–∞–Ω–∏—è: {age}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count} —Ä–∞–∑\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str}",
            reply_markup=build_inline_for_habit(habit_id)
        )
        schedule_reminder(habit_id)
        await cb.answer("–û—Ç–º–µ—á–µ–Ω–æ!")
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –≤ callback_done")
        await cb.answer("–û—à–∏–±–∫–∞.")

@dp.callback_query(lambda c: c.data and c.data.startswith("delete_"))
async def callback_delete(cb: types.CallbackQuery):
    try:
        habit_id = int(cb.data.split("_", 1)[1])
        cursor.execute("SELECT name FROM habits WHERE id=?", (habit_id,))
        row = cursor.fetchone()
        if not row:
            await cb.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        name = row[0]
        cursor.execute("DELETE FROM habits WHERE id=?", (habit_id,))
        conn.commit()
        try:
            scheduler.remove_job(f"reminder_{habit_id}")
        except Exception:
            pass
        await cb.message.edit_text(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞.")
        await cb.answer("–£–¥–∞–ª–µ–Ω–æ")
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –≤ callback_delete")
        await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

@dp.callback_query(lambda c: c.data and c.data.startswith("edit_"))
async def callback_edit(cb: types.CallbackQuery):
    try:
        habit_id = int(cb.data.split("_", 1)[1])
        cursor.execute("SELECT name, time FROM habits WHERE id=?", (habit_id,))
        row = cursor.fetchone()
        if not row:
            await cb.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        name, time_str = row
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{habit_id}")],
                [InlineKeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"edit_time_{habit_id}")]
            ]
        )
        await cb.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è '{name}':", reply_markup=keyboard)
        await cb.answer()
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –≤ callback_edit")
        await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.")

@dp.callback_query(lambda c: c.data and c.data.startswith("edit_name_"))
async def callback_edit_name(cb: types.CallbackQuery):
    try:
        habit_id = int(cb.data.split("_", 2)[2])
        EDIT_NAME_USERS[cb.from_user.id] = habit_id
        await cb.message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
        await cb.answer()
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –≤ callback_edit_name")
        await cb.answer("–û—à–∏–±–∫–∞.")

@dp.callback_query(lambda c: c.data and c.data.startswith("edit_time_"))
async def callback_edit_time(cb: types.CallbackQuery):
    try:
        habit_id = int(cb.data.split("_", 2)[2])
        EDIT_TIME_USERS[cb.from_user.id] = habit_id
        await cb.message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
        await cb.answer()
    except Exception:
        log.exception("–û—à–∏–±–∫–∞ –≤ callback_edit_time")
        await cb.answer("–û—à–∏–±–∫–∞.")

# -----------------------------
# –ó–∞–ø—É—Å–∫ (—Ä–µ—Å–∫–µ–π–¥–∂—É–ª –∏–∑ –ë–î, –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ polling)
# -----------------------------
async def main():
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫ (–Ω–∞ —Å–ª—É—á–∞–π —Ä–µ—Å—Ç–∞—Ä—Ç–∞)
    try:
        reschedule_all_from_db()
    except Exception:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.")
    scheduler.start()
    log.info("Scheduler started")
    # —Å—Ç–∞—Ä—Ç polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
